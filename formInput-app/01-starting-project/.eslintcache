[{"C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\App.js":"2","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\components\\SimpleInput.js":"3","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\hook\\use-input.js":"4","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\components\\BasicForm.js":"5","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\hook\\use-form.js":"6"},{"size":179,"mtime":1648643023000,"results":"7","hashOfConfig":"8"},{"size":214,"mtime":1650448371867,"results":"9","hashOfConfig":"8"},{"size":1144,"mtime":1650447543754,"results":"10","hashOfConfig":"8"},{"size":778,"mtime":1650447257144,"results":"11","hashOfConfig":"8"},{"size":2831,"mtime":1650451655579,"results":"12","hashOfConfig":"8"},{"size":1241,"mtime":1650554663643,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"mkdocz",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\index.js",[],["30","31"],"C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\App.js",["32"],"import SimpleInput from './components/SimpleInput';\nimport BasicForm from './components/BasicForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\components\\SimpleInput.js",["33"],"import React, { useState } from 'react'\n\nimport useInput from '../hook/use-input';\n\nconst SimpleInput = (props) => {\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '')\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault()\n    if (!enteredNameIsValid) {\n      return;\n    }\n    resetNameInput();\n  }\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses} >\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameChangedHandler}\n          value={enteredName}\n          onBlur={nameBlurHandler} />\n        {nameInputHasError && (<p className='error-text'>name must not be empty!</p>)}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\hook\\use-input.js",[],"C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\components\\BasicForm.js",[],"C:\\Users\\USER\\Desktop\\git\\LearnReact\\formInput-app\\01-starting-project\\src\\hook\\use-form.js",["34"],"import { useState, useReducer } from 'react';\r\n\r\n\r\nconst initialTnputState = {\r\n    value: '',\r\n    isTouched: false\r\n}\r\n\r\nconst inputStateReducer = (state, action) => {\r\n    if (action.type === 'INPUT') {\r\n        return { value: action.value, isTouched: state.isTouched }\r\n    }\r\n    if (action.type === 'BLUR') {\r\n        return { isTouched: true, value: state.value }\r\n    }\r\n    if (action.type === 'RESET') {\r\n        return { isTouched: false, value: '' }\r\n    }\r\n    return inputStateReducer;\r\n}\r\n\r\nconst useForm = (validator) => {\r\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialTnputState)\r\n\r\n    const validatedValue = validator(inputState.value);\r\n\r\n    const hasError = !validatedValue && inputState.isTouched\r\n\r\n    const onBlurHandler = (event) => {\r\n        dispatch({ type: 'BLUR' })\r\n    }\r\n\r\n    const onValueChangeHandler = (event) => {\r\n        dispatch({ type: 'INPUT', value: event.target.value })\r\n    }\r\n\r\n\r\n    const reset = () => {\r\n        dispatch({ type: 'RESET' })\r\n    }\r\n\r\n    return {\r\n        value: inputState.value,\r\n        isValid: validatedValue,\r\n        hasError,\r\n        onBlurHandler,\r\n        onValueChangeHandler,\r\n        reset\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default useForm;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":19},{"ruleId":"39","severity":1,"message":"43","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":25},{"ruleId":"39","severity":1,"message":"43","line":1,"column":10,"nodeType":"41","messageId":"42","endLine":1,"endColumn":18},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]